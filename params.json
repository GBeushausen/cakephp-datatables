{"name":"Cakephp-datatables","tagline":"CakePHP3 Plugin for DataTables plug-in for jQuery","body":"# cakephp-datatables\r\n\r\nThis plugin implements the jQuery dataTables plugin (www.datatables.net) in your CakePHP 3 application.\r\nIn addition there was added a multiple column search with request delay to minimize the ajax requests.\r\n\r\n\r\n## Requirements\r\n\r\n* CakePHP 3 (http://www.cakephp.org)\r\n* jQuery (http://www.jquery.com)\r\n* jQuery DataTables (http://www.datatables.net)\r\n* Composer (http://getcomposer.org)\r\n\r\n\r\n## Optional\r\n\r\n* Twitter Bootstrap 3 (http://getbootstrap.com)\r\n* FontAwesome 4 (http://fortawesome.github.io/Font-Awesome)\r\n\r\nThe core templates are written in Twitter Bootstrap syntax and included FontAwesome icons but can be changed easily.\r\n\r\n\r\n## Usage\r\n\r\n### Step 1: Installation\r\n\r\nUse composer to install this plugin.\r\nAdd the following repository and requirement to your composer.json:\r\n\r\n    \"repositories\": [\r\n        {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/fheider/cakephp-datatables\"\r\n        }\r\n    ],    \r\n    \"require\": {\r\n        \"fheider/cakephp-datatables\": \"dev-master\"\r\n    }\r\n\r\n\r\n### Step 2: Include CakePHP Plugin and load Component and Helper\r\n\r\nLoad plugin in ***app/bootstrap.php***:\r\n    \r\n    Plugin::load('DataTables', ['bootstrap' => false, 'routes' => false]);\r\n\r\n\r\n\r\n\r\nInclude component and helper: \r\n\r\n    class AppController extends Controller\r\n    {\r\n        \r\n        public $helpers = [\r\n            'DataTables' => [\r\n                'className' => 'DataTables.DataTables'\r\n            ]\r\n        ];\r\n        \r\n        public function initialize()\r\n        {\r\n            $this->loadComponent('DataTables.DataTables');\r\n        }\r\n        \r\n    }\r\n\r\n### Step 3: Include assets\r\n\r\nInclude jQuery and jQuery DataTables scripts first and then the dataTables logic:\r\n\r\n    echo $this->Html->script('*PATH*/jquery.min.js');\r\n    echo $this->Html->script('*PATH*/jquery.dataTables.min.js');\r\n    echo $this->Html->script('*PATH*/dataTables.bootstrap.min.js'); (Optional)\r\n    echo $this->Html->script('DataTables.cakephp.dataTables.js');\r\n\r\nInclude dataTables css:\r\n\r\n    echo $this->Html->css('PATH/dataTables.bootstrap.css');\r\n\r\n\r\n### Step 4: Add business logic in your controller\r\n\r\nUse it simply like find:\r\n\r\n    $data = $this->DataTables->find('*TABLE*', [\r\n        'contain' => []\r\n    ]);\r\n    \r\n    $this->set([\r\n        'data' => $data,\r\n        '_serialize' => array_merge($this->viewVars['_serialize'], ['data'])\r\n    ]);\r\n    \r\nThe array_merge is required because the component add multiple vars to view like recordsTotal, recordsFiltered, ...\r\nSo your serialized data were added to this vars.\r\n\r\n\r\n### Step 5: Template / View\r\n\r\nFirst display your table normal, so no additional request were sended by dataTables.\r\nThe table foot is used for the multiple search fields. This could be input- or select-elements.\r\n\r\n    <table class=\"table table-striped table-bordered table-hover dataTable\">\r\n        <thead>\r\n            <tr>\r\n                ...\r\n            </tr>\r\n        </thead>\r\n        <tfoot>\r\n        <tr class=\"table-search info\">\r\n            <td><input type=\"text\" placeholder=\"Search ...\" class=\"form-control input-sm input-block-level\" /></td>\r\n            <td><select><option value=\"\">---</option>...</select></td>\r\n            ...\r\n        </tr>\r\n        </tfoot>\r\n        <tbody>\r\n        <?php foreach($data as $item): ?>\r\n        <tr>\r\n            <td><?= $item->id ?></td>\r\n            <td><?= $item->name ?></td>\r\n            ...\r\n        </tr>\r\n        <?php endforeach; ?>\r\n        </tbody>\r\n    </table>\r\n    \r\n    \r\nThen add the dataTables logic.\r\nThe options are exaxt the options you get in the dataTables reference (https://datatables.net/reference/option/).\r\n\r\n    $this->DataTables->init([\r\n        'ajax' => [\r\n            'url' => $this->Html->url(['action' => 'index']),\r\n        ],\r\n        'deferLoading' => $recordsTotal,\r\n        'delay' => 600,\r\n        'columns' => [\r\n            [\r\n                'name' => '*MODEL*.id',\r\n                'data' => 'id'\r\n                'orderable' => false\r\n            ],\r\n            [\r\n                'name' => '*MODEL*.name',\r\n                'data' => 'name'\r\n            ],\r\n            ...\r\n        ]\r\n    ])->draw('.dataTable');\r\n\r\n\r\nIn draw method you set the selector of your table. Delay is an additional option for setting the delay for processing\r\nyour search input. If delay is 0 on every key press a request will be sent.\r\n\r\n**Notes to columns settings**\r\n\r\nEvery column contains 2 important informations: \r\n\r\n    name = name of your table and field like 'Customers.id'\r\n    data = name of the field in json response\r\n\r\nThe option **name** is needed for sorting and filtering. The option **data** is needed for processing the json response.  \r\nYou also can easily add related data (e.g. a customer belongs to a customer group)\r\n\r\n    name = Group.name\r\n    data = group.name\r\n    \r\n**Please keep in mind!**  \r\nIt is important that the amount of your columns array is the same like your columns in your HTML-Table! ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}